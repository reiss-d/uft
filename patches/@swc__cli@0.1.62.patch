diff --git a/lib/swc/dir.js b/lib/swc/dir.js
index 17e677e1f47da5d735cbb778ce839263e98d16f0..90a38b4e1ad0e46aadcc23f42bd719559b1a1ba6 100644
--- a/lib/swc/dir.js
+++ b/lib/swc/dir.js
@@ -43,8 +43,8 @@ function getDest(filename, outDir, ext) {
     }
     return (0, _path.join)(outDir, base);
 }
-async function handleCompile(filename, outDir, sync, swcOptions) {
-    const dest = getDest(filename, outDir, ".js");
+async function handleCompile(filename, outDir, sync, swcOptions, extension) {
+    const dest = getDest(filename, outDir, `.${extension || 'js'}`);
     const sourceFileName = (0, _slash.default)((0, _path.relative)((0, _path.dirname)(dest), filename));
     const options = {
         ...swcOptions,
@@ -75,15 +75,21 @@ async function beforeStartCompilation(cliOptions) {
     }
 }
 async function initialCompilation(cliOptions, swcOptions) {
-    const { includeDotfiles , filenames , copyFiles , extensions , outDir , sync , quiet , watch  } = cliOptions;
+    const { includeDotfiles , filenames , ignore , copyFiles , extensions , outDir , outFileExtension , sync , quiet , watch  } = cliOptions;
     const results = new Map();
     const start = process.hrtime();
-    const sourceFiles = await (0, _sources.globSources)(filenames, includeDotfiles);
+    const sourceFiles = await (0, _sources.globSources)(filenames, includeDotfiles, ignore);
     const [compilable, copyable] = (0, _sources.splitCompilableAndCopyable)(sourceFiles, extensions, copyFiles);
     if (sync) {
         for (const filename of compilable){
             try {
-                const result = await handleCompile(filename, outDir, sync, swcOptions);
+                const result = await handleCompile(
+                    filename,
+                    outDir,
+                    sync,
+                    swcOptions,
+                    outFileExtension
+                  );
                 results.set(filename, result);
             } catch (err) {
                 console.error(err.message);
@@ -101,7 +107,7 @@ async function initialCompilation(cliOptions, swcOptions) {
         }
     } else {
         await Promise.all([
-            Promise.allSettled(compilable.map((file)=>handleCompile(file, outDir, sync, swcOptions).catch((err)=>{
+            Promise.allSettled(compilable.map((file)=>handleCompile(file, outDir, sync, swcOptions, outFileExtension).catch((err)=>{
                     console.error(err.message);
                     throw err;
                 }))),
@@ -165,7 +171,7 @@ async function initialCompilation(cliOptions, swcOptions) {
     }
 }
 async function watchCompilation(cliOptions, swcOptions) {
-    const { includeDotfiles , filenames , copyFiles , extensions , outDir , quiet , sync  } = cliOptions;
+    const { includeDotfiles , filenames , copyFiles , extensions , outDir , outFileExtension , quiet , sync  } = cliOptions;
     const watcher = await (0, _sources.watchSources)(filenames, includeDotfiles);
     watcher.on("ready", ()=>{
         if (!quiet) {
@@ -198,7 +204,7 @@ async function watchCompilation(cliOptions, swcOptions) {
             if ((0, _sources.isCompilableExtension)(filename, extensions)) {
                 try {
                     const start = process.hrtime();
-                    const result = await handleCompile(filename, outDir, sync, swcOptions);
+                    const result = await handleCompile(filename, outDir, sync, swcOptions, outFileExtension);
                     if (!quiet && result === _constants.CompileStatus.Compiled) {
                         const end = process.hrtime(start);
                         console.log(`Successfully compiled ${filename} with swc (%dms)`, (end[1] / 1000000).toFixed(2));
diff --git a/lib/swc/options.js b/lib/swc/options.js
index 85eb7915b9fe6eac6db599a42d1093af8cfbd7b4..8bfe9e781fb6a803f56c84737d88ee6f34fd49ad 100644
--- a/lib/swc/options.js
+++ b/lib/swc/options.js
@@ -41,6 +41,7 @@ const initProgram = ()=>{
     program.option("--source-root [filename]", "the root from which all sources are relative");
     program.option("-o, --out-file [out]", "Compile all input files into a single file");
     program.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");
+    program.option("--out-file-extension [string]", "Use a specific extension for the output files [default: js]");
     program.option("-D, --copy-files", "When compiling a directory copy over non-compilable files");
     program.option("--include-dotfiles", "Include dotfiles when compiling and copying non-compilable files");
     program.option("-C, --config <config>", "Override a config from .swcrc file. e.g. -C module.type=amd -C module.moduleId=hello", collect);
@@ -149,11 +150,13 @@ function parserArgs(args) {
         outFile: opts.outFile,
         filename: opts.filename,
         filenames,
+        ignore: opts.ignore,
         sync: !!opts.sync,
         sourceMapTarget: opts.sourceMapTarget,
         extensions: opts.extensions || _core.DEFAULT_EXTENSIONS,
         watch: !!opts.watch,
         copyFiles: !!opts.copyFiles,
+        outFileExtension: opts.outFileExtension || "js",
         includeDotfiles: !!opts.includeDotfiles,
         deleteDirOnStart: Boolean(opts.deleteDirOnStart),
         quiet: !!opts.quiet
diff --git a/lib/swc/sources.js b/lib/swc/sources.js
index 62656d2285b314dd51ad4bc1346a7e0a991f96fa..78a001266a5034a249503c392b99bc57954fee3f 100644
--- a/lib/swc/sources.js
+++ b/lib/swc/sources.js
@@ -63,10 +63,11 @@ function _interopRequireWildcard(obj, nodeInterop) {
     }
     return newObj;
 }
-async function globSources(sources, includeDotfiles = false) {
+async function globSources(sources, includeDotfiles = false, ignore = []) {
     const globConfig = {
         dot: includeDotfiles,
-        nodir: true
+        nodir: true,
+        ignore
     };
     const files = await Promise.all(sources.filter((source)=>includeDotfiles || !(0, _path.basename)(source).startsWith(".")).map((source)=>{
         return new Promise((resolve)=>{